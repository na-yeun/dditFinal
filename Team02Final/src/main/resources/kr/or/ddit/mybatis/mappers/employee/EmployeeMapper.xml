<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.employee.dao.EmployeeMapper">
	<resultMap type="EmployeeVO" id="empMap" autoMapping="true">
		<association property="oAuth" autoMapping="true"/>
		<association property="departmentVO" autoMapping="true"></association>
		<collection property="commonList" ofType="CommonCodeVO" autoMapping="true"></collection>
	</resultMap>



<sql id="searchEmp">
    <where>
  	
  	<!-- 상태 조건: 재직중, 휴가중, 계정 정지만 허용 -->
    <if test="variousCondition.status == null or variousCondition.status == ''">
            (E.EMP_STATUS = 'U' OR E.EMP_STATUS = 'V' OR E.EMP_STATUS = 'S' OR E.EMP_STATUS='W' OR E.EMP_STATUS='Q')
    </if>
  	
	<if	test="variousCondition.department != null and variousCondition.department != ''">
		AND D.DEPART_CODE = #{variousCondition.department}
	</if>
	
	<if	test="variousCondition.position != null and variousCondition.position != ''">
		AND E.POSI_ID = #{variousCondition.position}
	</if>
	<if test="variousCondition.status != null and variousCondition.status!=''">
		AND E.EMP_STATUS = #{variousCondition.status}
	</if>
        <!-- 검색어 조건 -->
        <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(variousCondition.searchWord)">
            AND (INSTR(E.EMP_NAME, #{variousCondition.searchWord}) > 0)
        </if>
        <!-- 입사 시작일 조건 -->
        <if test="variousCondition.startDate != null and variousCondition.startDate != ''">
            AND TO_DATE(E.EMP_JOIN,'YYYY-MM-DD') >= #{variousCondition.startDate}
        </if>
        <!-- 입사 종료일 조건 -->
        <if test="variousCondition.endDate != null and variousCondition.endDate != ''">
            <![CDATA[ 
            AND TO_DATE(E.EMP_JOIN,'YYYY-MM-DD') <= #{variousCondition.endDate}
            ]]>
        </if>
    </where>
</sql>

	

<select id="selectEmployee" resultType="EmployeeVO" parameterType="EmployeeVO">
	SELECT 
	    EMPLOYEE.EMP_ID
	    , EMPLOYEE.EMP_PASS
	    , EMPLOYEE.EMP_NAME
	    , EMPLOYEE.EMP_BIRTH
	    , EMPLOYEE.EMP_GENDER
	    , EMPLOYEE.EMP_ADDR1
	    , EMPLOYEE.EMP_ADDR2
	    , EMPLOYEE.EMP_PHONE
	    , EMPLOYEE.EMP_JOIN
	    , EMPLOYEE.EMP_IMG
	    , EMPLOYEE.EMP_SIGNIMG
	    , EMPLOYEE.EMP_STATUS
	    , EMPLOYEE.POSI_ID
	    , EMPLOYEE.EMP_MAIL
	    , EMPLOYEE.DEPART_CODE
	    , EMPLOYEE.COMPANY_ID
	
	FROM EMPLOYEE   
	         WHERE EMPLOYEE.EMP_MAIL=#{accountMail} AND EMPLOYEE.EMP_PASS=#{accountPass}
</select>


	
<select id="selectOneEmployee" resultMap="empMap">

	SELECT 
    E.EMP_ID
  , E.EMP_PASS
  , E.EMP_NAME
  , E.EMP_BIRTH
  , (SELECT C.CODE_COMMENT
       FROM COMMON_CODE C
      WHERE 1=1
        AND C.TABLE_NAME='EMPLOYEE'
        AND C.CODE_TYPE='성별'
        AND C.CODE = E.EMP_GENDER
    )AS EMP_GENDER
  , E.EMP_ADDR1
  , E.EMP_ADDR2
  , E.EMP_PHONE
  , E.EMP_JOIN
  , E.EMP_IMG
  , E.EMP_SIGNIMG
  , E.COMPANY_ID
  , (
    SELECT C.CODE_COMMENT
       FROM COMMON_CODE C
      WHERE 1=1
        AND C.TABLE_NAME='EMPLOYEE'
        AND C.CODE_TYPE='재직상태'
        AND C.CODE = E.EMP_STATUS
  )AS EMP_STATUS
  ,(
    SELECT C.CODE_COMMENT
       FROM COMMON_CODE C
      WHERE 1=1
        AND C.TABLE_NAME='EMPLOYEE'
        AND C.CODE_TYPE='직급'
        AND C.CODE = E.POSI_ID
  )AS POSI_NAME
  , E.EMP_MAIL
  , D.DEPART_CODE
  , D.DEPART_NAME
  FROM EMPLOYEE E INNER JOIN DEPARTMENT D ON E.DEPART_CODE = D.DEPART_CODE
  WHERE E.EMP_ID=#{empId}
    AND D.DEPART_STATUS='Y'

	</select>
	
<select id="selectTotalRecord" resultType="int">
	SELECT COUNT(E.EMP_ID)
	    FROM EMPLOYEE E
	    INNER JOIN COMMON_CODE C
	        ON E.POSI_ID = C.CODE
	       AND C.TABLE_NAME = 'EMPLOYEE'
	    LEFT OUTER JOIN DEPARTMENT D
	        ON E.DEPART_CODE = D.DEPART_CODE
			 <include refid="searchEmp"/>

</select>
	
<select id="selectEmployeeList" resultMap="empMap">
    SELECT B.*
    FROM (
        SELECT ROWNUM RNUM, A.*
        FROM (
            SELECT 
                E.EMP_ID, 
                E.EMP_NAME,  
                E.EMP_MAIL,
                E.EMP_JOIN,
                E.EMP_PHONE,
                E.COMPANY_ID,
                (SELECT cc.CODE_COMMENT 
				   FROM COMMON_CODE cc
				  WHERE cc.TABLE_NAME = 'EMPLOYEE'
				    AND cc.CODE_TYPE = '직급'
				    AND cc.CODE = E.POSI_ID) AS POSI_NAME, 
                D.DEPART_CODE, 
                D.DEPART_NAME,
                (SELECT C.CODE_COMMENT
                   FROM COMMON_CODE C
                  WHERE 1=1
                    AND TABLE_NAME = 'EMPLOYEE'
                    AND CODE_TYPE = '재직상태'
                    AND C.CODE = E.EMP_STATUS
                ) AS EMP_STATUS
            FROM EMPLOYEE E
            LEFT OUTER JOIN DEPARTMENT D
                ON E.DEPART_CODE = D.DEPART_CODE
            <include refid="searchEmp"/>
           
            ORDER BY E.EMP_ID ASC
        ) A    
    ) B
    <![CDATA[
        WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
    ]]>
</select>


	
<select id="selectEmployeeForAuth" resultType="EmployeeVO">
	SELECT *
	FROM EMPLOYEE
	WHERE EMP_MAIL=#{empMail} AND EMP_NAME=#{empName} AND EMP_PHONE=#{empPhone}
</select>
	
<select id="selectEmployeeForJoin" resultType="EmployeeVO">
	SELECT *
	FROM EMPLOYEE
	WHERE EMP_MAIL=#{empMail}
</select>

<select id="selectVacationEmployeeList" resultType="EmployeeVO">
	SELECT 
	    EMPLOYEE.EMP_NAME
	    , EMPLOYEE.POSI_ID
	    , (SELECT C.CODE_COMMENT
	       FROM COMMON_CODE C
	      WHERE 1=1
	        AND C.TABLE_NAME='EMPLOYEE'
	        AND C.CODE_TYPE='직급'
	        AND C.CODE = EMPLOYEE.POSI_ID
	  )AS POSI_NAME
	FROM EMPLOYEE
	WHERE EMP_STATUS = 'V' AND DEPART_CODE = #{departCode}
</select>
	

<select id="selectMaxEmpIdByJoin" resultType="string">
SELECT MAX(EMP_ID)
    FROM EMPLOYEE
    WHERE TO_CHAR(TO_DATE(EMP_JOIN, 'YYYYMMDD'), 'YYYYMM') = #{yyyymm}
</select>



<insert id="insertEmployee" parameterType="list">
    INSERT INTO EMPLOYEE (
        EMP_ID
      , EMP_PASS
      , EMP_NAME
      , EMP_MAIL
      , EMP_JOIN
      , EMP_STATUS
      , POSI_ID
      , DEPART_CODE
      , EMP_BIRTH
      , EMP_GENDER
      , EMP_PHONE
      , COMPANY_ID
    ) VALUES (
        #{empId}
        , '123'
        , #{empName}
        , #{empMail}
        , #{empJoin}
        , 'W'
        , #{posiId}
        , #{departCode}
        , #{empBirth} 
        , #{empGender}
        , #{empPhone}
        , 'a001'
    )
</insert>

<!-- 한명 인서트할때 사용할 것.  -->
<insert id="insertOneEmployee">

	INSERT INTO EMPLOYEE(
			EMP_ID
		  , EMP_PASS
		  , EMP_NAME
		  , EMP_MAIL
		  , EMP_JOIN
		  , EMP_STATUS
		  , POSI_ID
		  , DEPART_CODE
		  , EMP_BIRTH
		  , EMP_GENDER
		  , EMP_PHONE
		  , COMPANY_ID
		  )
	VALUES(
		  #{empId}
        , '123'
        , #{empName}
        , #{empMail}
        , #{empJoin}
        , 'W'
        , #{posiId}
        , #{departCode}
        , #{empBirth}
        , #{empGender}
        , #{empPhone}
		, 'a001'
	)
</insert> 
	
	
	
	
<!-- 
	emp pass나 account_mail이 업데이트 될 경우 상위 테이블인 account가 먼저 업데이트가 되어야함
	해당 트리거 필요(넣어뒀음)	
-->
<update id="updateEmployee">
	UPDATE EMPLOYEE
	SET
		<trim prefixOverrides=",">
			<if test="empPass neq null and empPass.length gt 0">
			 , EMP_PASS=#{empPass,jdbcType=VARCHAR}
			</if>
			<if test="empName neq null and empName.length gt 0">
			 , EMP_NAME=#{empName,jdbcType=VARCHAR}
			</if>
			<if test="empBirth neq null and empBirth.length gt 0">
			 , EMP_BIRTH=#{empBirth,jdbcType=VARCHAR}
			</if>
			<if test="empGender neq null and empGender.length gt 0">
			 , EMP_GENDER=#{empGender,jdbcType=VARCHAR}
			</if>
			<if test="empAddr1 neq null and empAddr1.length gt 0">
			 , EMP_ADDR1=#{empAddr1,jdbcType=VARCHAR}
			</if>
			<if test="empAddr2 neq null and empAddr2.length gt 0">
			 , EMP_ADDR2=#{empAddr2,jdbcType=VARCHAR}
			</if>
			<if test="empPhone neq null and empPhone.length gt 0">
			 , EMP_PHONE=#{empPhone,jdbcType=VARCHAR}
			</if>
			<if test="empMail neq null and empMail.length gt 0">
			 , EMP_MAIL=#{empMail,jdbcType=VARCHAR}
			</if>
			<if test="empJoin neq null and empJoin.length gt 0">
			 , EMP_JOIN=#{empJoin,jdbcType=VARCHAR}
			</if>
			<if test="empImg neq null and empImg.length gt 0">
			 , EMP_IMG=#{empImg,jdbcType=BLOB}
			</if>
			<if test="empSignimg neq null and empSignimg.length gt 0">
			 , EMP_SIGNIMG=#{empSignimg,jdbcType=BLOB}
			</if>
			<if test="empStatus neq null and empStatus.length gt 0">
			 , EMP_STATUS=#{empStatus,jdbcType=VARCHAR}
			</if>
			<if test="posiId neq null and posiId.length gt 0">
			 , POSI_ID=#{posiId,jdbcType=VARCHAR}
			</if>
			<if test="departCode neq null and departCode.length gt 0">
			 , DEPART_CODE=#{departCode,jdbcType=VARCHAR}
			</if>
			<if test="myComment neq null and myComment.length gt 0">
			 , MY_COMMENT=#{myComment,jdbcType=VARCHAR}
			</if>
		</trim>
	WHERE EMP_ID=#{empId}
</update>


<update id="updateEmployeeStatus">
	UPDATE EMPLOYEE
	SET EMP_STATUS=#{empStatus}
	WHERE EMP_MAIL=#{empMail}
</update>

<delete id="deleteEmployee">
	UPDATE EMPLOYEE
	   SET EMP_STATUS = 'Q'
	 WHERE EMP_ID=#{empId}
</delete>

<delete id="deleteOneEmployee">
	UPDATE EMPLOYEE
	   SET EMP_STATUS = 'Q'
	 WHERE EMP_ID=#{empId}
</delete>



<update id="deleteEmpImg">
	UPDATE EMPLOYEE
	SET EMP_IMG=null
	WHERE EMP_ID=#{empId}
</update>
<update id="deleteEmpSignImg">
	UPDATE EMPLOYEE
	SET EMP_SIGNIMG=null
	WHERE EMP_ID=#{empId}
</update>

	<!-- 12.13 민경주 - 재직중인 사원 목록 조회 (조직도용, 관리자 제외, 직급 내림차순 정렬) -->
<select id="selectEmployeeListForDept" resultMap="empMap">
	SELECT
		E.EMP_ID
		 , E.EMP_NAME
		 , E.DEPART_CODE
		 , (SELECT C.CODE_COMMENT
			FROM COMMON_CODE C
			WHERE C.TABLE_NAME = 'EMPLOYEE'
			  AND C.CODE_TYPE = '직급'
			  AND C.CODE = E.POSI_ID) AS POSI_NAME -- 스칼라 서브쿼리로 직위명 조회
		 , (SELECT D.DEPART_NAME
			FROM DEPARTMENT D
			WHERE D.DEPART_CODE = E.DEPART_CODE) AS DEPART_NAME -- 스칼라 서브쿼리로 부서명 조회
	FROM EMPLOYEE E
	WHERE E.EMP_STATUS = 'U'
	  AND E.POSI_ID != '7'  -- 대표 직급 제외
	ORDER BY
		E.DEPART_CODE,
		E.POSI_ID DESC
</select>

	<!-- 12.14 민경주 - 사원id로 조직명, 직급명 갖고오기 -->
<select id="selectEmployeePosiNameAndDeptNameByEmpId" resultType="map">
	SELECT
		(SELECT C.CODE_COMMENT
		 FROM COMMON_CODE C
		 WHERE C.TABLE_NAME = 'EMPLOYEE'
		   AND C.CODE_TYPE = '직급'
		   AND C.CODE = E.POSI_ID) AS POSI_NAME -- 스칼라 서브쿼리로 직위명 조회
		 , (SELECT D.DEPART_NAME
			FROM DEPARTMENT D
			WHERE D.DEPART_CODE = E.DEPART_CODE) AS DEPART_NAME -- 스칼라 서브쿼리로 부서명 조회
	FROM EMPLOYEE E
	WHERE E.EMP_ID = #{empId}
</select>


<select id="selectAllDept" resultType="DepartmentVO">

SELECT
	 DEPART_CODE
   , DEPART_NAME
  FROM DEPARTMENT
 WHERE DEPART_STATUS='Y'

</select>

<select id="selectAllPosi" resultType="CommonCodeVO">
	SELECT 
	   CODE
	  ,CODE_COMMENT
	  FROM COMMON_CODE
	 WHERE 1=1
	  AND TABLE_NAME = 'EMPLOYEE'
	  AND CODE_TYPE = '직급'
</select>

<select id="selectStatusType" resultType="CommonCodeVO">

	SELECT 
	 CODE
	,CODE_COMMENT
	  FROM COMMON_CODE
	 WHERE 1=1
	  AND TABLE_NAME = 'EMPLOYEE'
	  AND CODE_TYPE = '재직상태'
	
</select>
	
<resultMap type="VacationStatusVO" id="vacationStatusMap" autoMapping="true">
	<association property="employee" autoMapping="true">
		
	</association>
	
</resultMap>

<select id="selectOneVacationStatusDetail" resultMap="vacationStatusMap">
	SELECT 
     VS.VSTA_CODE 
   , E.EMP_ID
   , E.EMP_NAME 
   , (
   	 SELECT 
   	      D.DEPART_NAME
   	   FROM DEPARTMENT D
   	  WHERE D.DEPART_CODE = E.DEPART_CODE ) AS DEPART_NAME
   , (SELECT CODE_COMMENT 
        FROM COMMON_CODE 
       WHERE 1=1
         AND TABLE_NAME = 'EMPLOYEE'
         AND CODE_TYPE = '직급'
         AND CODE = E.POSI_ID ) AS POSI_NAME 
   , VS.VSTA_ALLCOUNT 
   , VS.VSTA_USE
   , VS.VSTA_NOWCOUNT
   , VS.VSTA_SICKCOUNT
   , VS.VSTA_APPEND
  FROM VACATION_STATUS VS 
       LEFT OUTER JOIN EMPLOYEE E ON (VS.EMP_ID = E.EMP_ID) 
 WHERE 1=1
   AND VS.VSTA_CODE=#{vstaCode}
   AND E.EMP_ID = #{empId}
   
			
</select>
	
<select id="selectVstaCodeList" resultType="VacationStatusVO">
	SELECT DISTINCT
	    VSTA_CODE
	  FROM VACATION_STATUS
         ORDER BY VSTA_CODE DESC
</select>
	
<update id="updateVacationStatus">
	UPDATE VACATION_STATUS
	   SET 
	     VSTA_ALLCOUNT = VSTA_ALLCOUNT + #{addVacationDays}
	   , VSTA_NOWCOUNT = VSTA_NOWCOUNT + #{addVacationDays}
	   , VSTA_APPEND = VSTA_APPEND + #{addVacationDays}
     WHERE 1=1 
       AND EMP_ID = #{empId}
       AND VSTA_CODE = #{vstaCode}
      
</update>
	

	
<select id="selectMyDepartName" resultType="DepartmentVO">
	SELECT 
	     D.DEPART_CODE
	   , D.DEPART_NAME 
	   
	  FROM DEPARTMENT D INNER JOIN EMPLOYEE E ON E.DEPART_CODE = D.DEPART_CODE  
	 WHERE E.EMP_ID = #{empId}
</select>

<!--	1월 13일 민경주 올림-->
<select id="selectEmployeeNameById" parameterType="string" resultType="string">
	SELECT EMP_NAME
	FROM EMPLOYEE
	WHERE EMP_ID = #{empId}
</select>
	
</mapper>